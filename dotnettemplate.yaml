apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: dotnet-template
  title: dot net Template
  description: Create a microservice using dot net 
  tags:
    - recommended
    - dotnet
spec:
  owner: sre-team@trella.app
  type: website
  parameters:
    - title: Provide information related to the deployment
      required:
        - service_name
        - owner_squad
      properties:
        service_name:
          title: Name of the service
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner_squad:
          title: the squad owning the microservice
          type: string
          description: Owner of the microservice
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.service_name }}
          description: ${{ parameters.description }}
          destination: trella.${{ parameters.service_name | parseRepoUrl }}
          owner: ${{ parameters.owner }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.service_name }}
        repoUrl: trella.${{ parameters.service_name }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
